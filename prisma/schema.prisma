datasource db {
  provider              = "mysql"
  url                   = env("DATABASE_URL")
  shadowDatabaseUrl     = env("SHADOW_DATABASE_URL")
  referentialIntegrity  = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

enum Role {
  USER
  ADMIN
}

enum BindingFormat {
  IN_PLANO
  IN_FOLIO
  IN_QUARTO
  IN_6
  IN_OCTAVO
  IN_12
  IN_16
}

model User {
  id            Int          @id @default(autoincrement())
  email         String?      @unique @db.VarChar(255)
  emailVerified  DateTime?    @map("email_verified")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  firstName      String?      @db.VarChar(255)
  lastName      String?      @db.VarChar(255)
  image         String?
  role          Role         @default(USER)
  books         Book[]
  authors       Author[]
  publishers    Publisher[]
  genres        Genre[]

  @@map("users")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map("compound_id")
  userId             Int       @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("sessions")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier  String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("verification_requests")
}

model Book {
  id              Int           @id @default(autoincrement())
  owner           User          @relation(fields: [ownerId], references: [id])
  ownerId         Int
  publisher       Publisher     @relation(fields: [publisherId], references: [id])
  publisherId     Int
  authors         Author[]
  genre           Genre[]
  bindingFormat   BindingFormat
  title           String        @db.VarChar(255)
  isbn            String?       @db.VarChar(13)
  publicationYear String?       @db.VarChar(4)
  description     String?       @db.LongText()
  observations    String?       @db.LongText()
  volume          Int?
  hasBeenRead     Boolean       @default(false)
  isEbook         Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Author {
  id        Int       @id @default(autoincrement())
  owner     User      @relation(fields: [ownerId], references: [id])
  ownerId   Int
  books     Book[]
  name      String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([ownerId, name])
}

model Publisher {
  id        Int       @id @default(autoincrement())
  owner     User      @relation(fields: [ownerId], references: [id])
  ownerId   Int
  books     Book[]
  name      String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([ownerId, name])
}

model Genre {
  id        Int       @id @default(autoincrement())
  owner     User      @relation(fields: [ownerId], references: [id])
  ownerId   Int
  books     Book[]
  name      String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([ownerId, name])
}
